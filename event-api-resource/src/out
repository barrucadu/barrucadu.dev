#!/usr/bin/env python3

import json
import os
import requests
import sys
import time
import urllib.parse

script_input = json.loads(sys.stdin.read())

uri = script_input["source"].get("uri", "https://event-api.barrucadu.dev")
project = script_input["source"]["project"]
token = script_input["source"]["token"]
path = script_input["params"].get("path")
status = script_input["params"]["status"]
description = script_input["params"].get("description")
phase = script_input["params"].get("phase")
source_dir = sys.argv[1]

link = None
if script_input["params"].get("show_link", True):
    BUILD_TEAM_NAME = os.environ["BUILD_TEAM_NAME"]
    BUILD_PIPELINE_NAME = os.environ["BUILD_PIPELINE_NAME"]
    BUILD_JOB_NAME = os.environ["BUILD_JOB_NAME"]
    BUILD_NAME = os.environ["BUILD_NAME"]
    link = script_input["params"].get(
        "link",
        f"https://cd.barrucadu.dev/teams/{BUILD_TEAM_NAME}/pipelines/{BUILD_PIPELINE_NAME}/jobs/{BUILD_JOB_NAME}/builds/{BUILD_NAME}",
    )

tag = None
tag_url = None
if path:
    if phase is None:
        try:
            with open(f"{source_dir}/{path}/phase", "rb") as file:
                phase = file.read().decode("utf-8")
        except FileNotFoundError:
            pass

    if description is None:
        try:
            with open(f"{source_dir}/{path}/description", "rb") as file:
                description = file.read().decode("utf-8")
        except FileNotFoundError:
            print("missing description.", file=sys.stderr)
            sys.exit(1)

    try:
        with open(f"{source_dir}/{path}/tag", "rb") as file:
            tag = file.read().decode("utf-8")
        with open(f"{source_dir}/{path}/tag_url", "rb") as file:
            tag_url = file.read().decode("utf-8")
    except FileNotFoundError:
        pass

if status not in ["Ok", "Failure", "Error"]:
    print("params.status should be one of Ok, Failure, Error.", file=sys.stderr)
    sys.exit(1)

if not description:
    print("params.description must be nonempty.", file=sys.stderr)
    sys.exit(1)

in_event = {"status": status, "description": description}

if phase:
    in_event["phase"] = phase
if tag:
    in_event["tag"] = tag
if tag_url:
    in_event["tagUrl"] = tag_url
if link:
    in_event["detailsUrl"] = link

attempts = 0
exc = Exception("Something went wrong")
out_event = None
while out_event is None and attempts < 5:
    try:
        r = requests.post(
            f"{uri}/project/{urllib.parse.quote(project)}/event",
            headers={"Authorization": f"Bearer {token}"},
            json=in_event,
        )
        r.raise_for_status()
        out_event = r.json()
    except requests.exceptions.HTTPError as e:
        print(f"got {e}, retrying [{attempts}/5]", file=sys.stderr)
        exc = e
        attempts += 1
        time.sleep(5)

if out_event is None:
    raise exc

metadata = [{"name": k, "value": v} for k, v in out_event.items() if k != "project"]
metadata.extend(
    [{"name": f"project_{k}", "value": v} for k, v in out_event["project"].items()]
)

print(json.dumps({"version": {"uuid": out_event["uuid"]}, "metadata": metadata}))
